@startuml
skinparam linetype ortho
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

package Activities{
    class MainActivity {
        -MainViewModelInterface interface
        -NavController navController
    }
    package Fragments{
        +class AccountFragment{
            -AccountViewModel accountViewModel
        }
       +class AccountSettingsFragment{
            -AccountSettingsViewModel settingsViewModel
        }
        +class BrowseFragment{
            -ListViewModel viewModel
            -MovieListAdapter movieListAdapter
        }
        +class FavoritesFragment{

        }
        +class LoginFragment{
            -LoginViewModel loginViewModel
        }
        +class MovieDetails{

        }
        +class RecommendedFragment{

        }
        +class WatchedFragment{

        }
        +class WatchLaterFragment{

        }
        package Adapters{
           +class CastAdapter{
                -ArrayList<Actor> actors
            }
           +class CommentAdapter{
                -ArrayList<Comment> comments
            }
           +class GenreAdapter{
                -ArrayList<Genre> genres
            }
           +class MovieListAdapter{
                -ArrayList<Movie>
            }
        }
    }
}
package DataHolders{
   +class Actor{
        -int ID
        -int movieID
        -int order
        -String name
        -String character
        -String pictureLink
    }
   +class AuthenticationResponse{
        -boolean successful
        -String errorMsg
    }
   +class Comment{
        -int commentID
        -int movieID
        -String profilePicLink
        -String username
        -String comment
    }
   +class Genre{
        -int genreID
        -String name
    }
   +class Movie{
        +double popularity
        +int voteCount
        +boolean video
        +String posterPath
        +int id
        +boolean adult
        +String backDropPath
        +String originalLanguage
        +String originalTitle
        +int[] genreIDs
        +String title
        +double voteAverage
        +String overview
        +String releaseDate
    }
   +interface MovieApi{
        #Single<MovieList> getMovies(String)
    }
   +class MovieApiService{
        {static} -String BASE_URL
        -MovieApi api
    }
   +class MovieList{
        +List<Movie> movies
    }
   +class User{
        -String userName
        -String email
        -boolean isVerified
        -String UID
        -Bitmap userProfilePicture
    }
}
package Repository{
    package ViewModels{
        +class AccountSettingsViewModel{
            #IMainRepository mainRepository
            #LiveData<User> liveUser
            +LiveData<User> getUser()
        }
        +class AccountViewModel{
            -IMainRepository mainRepository
            #LiveData<User> liveUser
            +LiveData<User> getUser()
        }
        +class ListViewModel{
            +MutableLiveData<List<Movie>> movies
            +MutableLiveData<Boolean> movieLoadError
            +MutableLiveData<Boolean> loading
            -MovieApiService movieService
            -CompositeDisposable disposable
            +void refresh()
            -fetchFromRemote()
            -fetchFromDatabase()
        }
        +class LoginViewModel{
            #IMainRepository mainRepository;
            #MutableLiveData<AuthenticationResponse> signInResponse
            #MutableLiveData<AuthenticationResponse> createUserResponse
            #LiveData<User> user
        }
        +class MainViewModel{
            -IMainRepository mainRepository
            -LiveData<User> user
            +LiveData<User> getUser()
        }
        +interface MainViewModelInterface{
            #LiveData<User> getUser()
        }
    }
    package API{
        class FirebaseAPI {
            -private FirebaseAuth mAuth
            -private MutableLiveData user
            +LiveData<User> getUser()
            +void registerUser(String, String, OnCompleteListener)
            +void loginUser(String, String, OnCompleteListener)
            +void signOut()
        }
    }
    package Database{
        +interface ActorDao {
            #LiveData<List<Actor>> getActorsFromMovie(int)
            #void insertActors(Actor...)
        }
        +interface CommentDao{
            #LiveData<List<Comment>> getCommentsFromMovie(int)
            #void insertComments(Comment...)
            #void updateComments(Comment...)
            #void deleteComments(Comment...)
        }
        +interface GenreDao{
            #LiveData<Genre> getGenreById(int)
            #LiveData<List<Genre>> getAllGenres()
            #void deleteGenreByID(int[])
            #void insertGenres(Genre...)
            #void updateGenres(Genre...)
            #void deleteGenres(Genre...)
        }
        +interface MovieDao{
            #LiveData<List<Movie>> getAllMovies()
            #LiveData<Movie> getMovieByID(int)
            #void insertMovies(Movies...)
            #void updateMovies(Movies...)
            #void deleteMovies(Movies...)
            #void deleteMoviesByID(int)
        }
        +abstract class MovieDB {
            {static} -MovieDB INSTANCE
            {static} -String DB_NAME
            {abstract} +ActorDao ActorDao()
            {abstract} +MovieDao movieDao()
            {abstract} +CommentDao commentDao()
            {abstract} +GenreDao genreDao()
            {abstract} + MovieGenreJoinDao movieGenreJoinDao()
            {static} +getInstance(Context)
        }
        +interface MovieGenreJoinDao {
            #LiveData<List<Movie>> getMoviesByGenre(int[])
            #LiveData<List<Genre>> getGenresFromMovie(int)
            #void insert(MovieGenreJoin...)
            #void deleteMovieGenreJoin(MovieGenreJoin...)
        }
        +class MovieGenreJoin{
            +int movieID
            +int genreID
        }
    }
    +interface IMainRepository{
        #LiveData<User> getUserLiveData()
        #registerUser(String, String, OnCompleteListener)
        #loginUser(String, String, OnCompleteListener)
        #void signOutUser()
    }
    +class MainRepository{
        #FirebaseAPI FirebaseAPI
        {static} -IMainRepository MAIN_REPOSITORY
        {static} +IMainRepository getMainRepository()
        +LiveData<User> getUserLiveData()
        +void registerUser(String, String, OnCompleteListener)
        +void loginUser(String, String, OnCompleteListener)
        +void signOutUser()
    }

}

MainViewModel ..> MainViewModelInterface
MainViewModel --* User
MainViewModel --* IMainRepository

LoginViewModel --* AuthenticationResponse
LoginViewModel --* User
LoginViewModel --* IMainRepository

ListViewModel --* Movie
ListViewModel --* MovieApiService

AccountViewModel --* User
AccountViewModel --* IMainRepository

AccountSettingsViewModel --* User
AccountSettingsViewModel--* IMainRepository

MainRepository ..> IMainRepository
MainRepository --* FirebaseAPI
MainRepository --o User

IMainRepository --o User

MovieDB --* ActorDao
MovieDB --* MovieDao
MovieDB --* CommentDao
MovieDB --* GenreDao
MovieDB --* MovieGenreJoinDao

MovieApiService --* MovieApi

MainActivity --* MainViewModelInterface

BrowseFragment --* ListViewModel
BrowseFragment --* MovieListAdapter

AccountSettingsFragment --* AccountSettingsViewModel

AccountFragment --* AccountViewModel

MovieDetails --o CastAdapter
MovieDetails --o CommentAdapter
MovieDetails --o GenreAdapter
@enduml