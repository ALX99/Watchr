package ipren.watchr.viewModels;


import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModel;

import java.util.List;

import ipren.watchr.dataHolders.Comment;
import ipren.watchr.dataHolders.User;
import ipren.watchr.repository.IMainRepository;
import ipren.watchr.repository.MainRepository;


public class MainViewModel extends ViewModel implements MainViewModelInterface {

    private final IMainRepository mainRepository;
    //If you don't set a value the LiveData object wont broadcast any initial value, not even null
    //Setting user to null to signal that no user is logged in

    private LiveData<User> user;

    //Allows Activity to sync with viewmodel
    public LiveData<User> getUser() {
        return user;
    }

    public LiveData<User> getUser(int UID){
        // Get User from DB by UID, to be able to associate
        // comments with an author.
        // Read only I suppose, since getting access to a users stuff with only UID would be weird.

        // Redo the user object as you like to match against the one in firebase
        return null;
    }

    public MainViewModel(IMainRepository mainRepository){
        this.mainRepository = mainRepository;
        user = mainRepository.getUserLiveData();
    }
    public MainViewModel(){
        mainRepository = MainRepository.getMainRepository();
        user = mainRepository.getUserLiveData();
    }

    public List<Comment> getCommentsFromMovie() {
        // Comments should contain the comment string,
        // comment id (could prob be autogenerated),
        // and the UID of the user

        // Redo the comment object as you like to match against the one in firebase
        return null;
    }
    /*
    Probably even more stuff to add later, such as a table to contain liked movies of different users,
    being able to delete comments, watched movies etc etc, but thats probably better to take on later.
    */
}
